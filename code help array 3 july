duplicates in an array
//optimised solution
time complexity -o(n)
class Solution {
public:
    vector<int> findDuplicates(vector<int>& nums) 
    
    {
        vector<int> duplicates;
        
        for(int i=0;i<nums.size();i++)
        { 
            // evaluate index of selected element if array would have been sorted..
            int indexOfElem = abs(nums[i]) - 1;
            
            // negate the element
            nums[indexOfElem] = - nums[indexOfElem];
            
            // if this element is positive means double negation had happened which 
            // means we editied this element twice.
            if(nums[indexOfElem]>0)
                duplicates.push_back(indexOfElem+1);
            
        }
        return duplicates;
    }
};
//brute force 0(n^2)
class Solution {
public:
    vector<int> findDuplicates(vector<int>& nums) {
        if(nums.empty())
            return{};
        vector<int>ans;
        for(int i=0;i<nums.size();i++){
           for(int j=i+1;j<nums.size();j++) {
               if(nums[i]!=nums[j]){
                   continue;
               }
               else{
                   ans.push_back(nums[i]);
               }
               
           }
        
    }
        return ans;
    }
};
